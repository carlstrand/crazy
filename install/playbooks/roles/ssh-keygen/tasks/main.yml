---
- name: Create the backup ssh-key folder if it does not exists
  tags: sync
  register: backup_ssh_dir
  delegate_to: localhost
  file:
    path: '{{ playbook_dir }}/../../backup/{{ network.domain }}/ssh-keys/{{ key.user }}/'
    state: directory

# The '--update' option make sure to not overwrite already copied ssh keys.
- name: If the keys have been generated before, copy them on the remote server
  tags: sync
  register: key_upload
  when: not backup_ssh_dir.changed
  synchronize:
    src: '{{ playbook_dir }}/../../backup/{{ network.domain }}/ssh-keys/{{ key.user }}/'
    dest: '{{ key.path }}'
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--include={{ key.name }}.rsa*'
      - '--exclude=*'
      - '--ignore-existing'
      - '--update'

- name: Generate an SSH key for backup
  when: not key_upload.changed
  register: ssh_keygen
  tags: ssh-keygen
  shell: >-
    ssh-keygen
    -q
    -b {{ key.size | default(2048) }}
    -t {{ key.size | default("rsa") }}
    -f {{ key.path }}/{{ key.name }}.rsa
    -C 'SSH key for homebox backup'
    -N ""
  args:
    creates: '{{ key.path }}{{ key.name }}.rsa'

- name: Pull the SSH keys from the server
  when: not key_upload.changed
  tags: sync
  synchronize:
    mode: pull
    src: '{{ key.path }}'
    dest: '{{ playbook_dir }}/../../backup/{{ network.domain }}/ssh-keys/{{ key.user }}/'
    perms: yes
    rsync_opts:
      - '--include={{ key.name }}.rsa*'
      - '--exclude=*'
      - '--no-motd'
      - '--update'

- name: Send the public key to the postmaster
  when: ssh_keygen.changed
  mail:
    from: 'root@{{ network.domain }}'
    subject: 'Public SSH key for {{ key.user }}'
    to: 'postmaster@{{ network.domain }}'
    body: >-
      Find attached the public SSH key for the {{ key.user }} user.
      This will be used for backup purposes. The user name will be
      "{{ key.name }}"
    attach: '{{ key.path }}{{ key.name }}.rsa.pub'
